{"ast":null,"code":"export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","map":{"version":3,"sources":["C:/Users/owner/OneDrive/Dokumen/GitHub/sikat-design/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js"],"names":["buildMatchPatternFn","args","dirtyString","dirtyOptions","string","String","options","matchResult","match","matchPattern","matchedString","parseResult","parsePattern","value","valueCallback","rest","slice","length"],"mappings":"AAAA,eAAe,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAChD,SAAO,UAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC1C,QAAIC,MAAM,GAAGC,MAAM,CAACH,WAAD,CAAnB;AACA,QAAII,OAAO,GAAGH,YAAY,IAAI,EAA9B;AACA,QAAII,WAAW,GAAGH,MAAM,CAACI,KAAP,CAAaP,IAAI,CAACQ,YAAlB,CAAlB;;AAEA,QAAI,CAACF,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAIG,aAAa,GAAGH,WAAW,CAAC,CAAD,CAA/B;AACA,QAAII,WAAW,GAAGP,MAAM,CAACI,KAAP,CAAaP,IAAI,CAACW,YAAlB,CAAlB;;AAEA,QAAI,CAACD,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAIE,KAAK,GAAGZ,IAAI,CAACa,aAAL,GAAqBb,IAAI,CAACa,aAAL,CAAmBH,WAAW,CAAC,CAAD,CAA9B,CAArB,GAA0DA,WAAW,CAAC,CAAD,CAAjF;AACAE,IAAAA,KAAK,GAAGP,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACQ,aAAR,CAAsBD,KAAtB,CAAxB,GAAuDA,KAA/D;AACA,WAAO;AACLA,MAAAA,KAAK,EAAEA,KADF;AAELE,MAAAA,IAAI,EAAEX,MAAM,CAACY,KAAP,CAAaN,aAAa,CAACO,MAA3B;AAFD,KAAP;AAID,GAtBD;AAuBD","sourcesContent":["export default function buildMatchPatternFn(args) {\r\n  return function (dirtyString, dirtyOptions) {\r\n    var string = String(dirtyString);\r\n    var options = dirtyOptions || {};\r\n    var matchResult = string.match(args.matchPattern);\r\n\r\n    if (!matchResult) {\r\n      return null;\r\n    }\r\n\r\n    var matchedString = matchResult[0];\r\n    var parseResult = string.match(args.parsePattern);\r\n\r\n    if (!parseResult) {\r\n      return null;\r\n    }\r\n\r\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\r\n    value = options.valueCallback ? options.valueCallback(value) : value;\r\n    return {\r\n      value: value,\r\n      rest: string.slice(matchedString.length)\r\n    };\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}