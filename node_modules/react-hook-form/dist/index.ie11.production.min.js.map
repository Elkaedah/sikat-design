{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((isArray(value) ? value : [value]) as T[]).map(mapValueToBoolean).flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport filterBooleanArray from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n} from './types';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    formStateRef: {\n      current: { dirtyFields, touched },\n    },\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n    shouldUnregister,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !filterOutFalsy(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      const output = method(get(touched, name), args.argA, args.argB);\n      shouldSet && set(touched, name, output);\n      cleanup(touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(get(dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(dirtyFields, name, output);\n      cleanup(dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields,\n      isDirty,\n      touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const dirtyInputs = get(dirtyFields, name, []);\n      set(dirtyFields, name, [\n        ...(allFields.current.length > dirtyInputs.length\n          ? (fillEmptyArray(allFields.current) || []).map(\n              (_, index) => dirtyInputs[index],\n            )\n          : dirtyInputs),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    if (!shouldUnregister) {\n      shallowFieldsStateRef.current[name] = [\n        ...(shallowFieldsStateRef.current[name] || []),\n        value,\n      ];\n    }\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(prependAt, {\n      argA: emptyArray,\n      argC: filterBooleanArray(value),\n    });\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: filterBooleanArray(value),\n      },\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","keys1_1","__values","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","_l","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","dirtyFields","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","shouldUnregister","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","resetFields","cleanup","batchStateUpdate","method","args","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","defaultValues","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","filterBooleanArray","append","dirtyInputs_1","_","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","isFormDirty","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","setFieldArrayDirtyFields","parentName","isFieldWatched","found","size","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}